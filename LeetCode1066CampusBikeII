class Solution {
    public int assignBikes(int[][] workers, int[][] bikes) {
        int n = bikes.length;
        int [] dp = new int[1 << n];
        return dfs(workers, 0, bikes, 0, dp);
    }
    
    private int dfs(int [][] workers, int workerIndex, int [][] bikes, int state, int [] dp){
        if(workerIndex == workers.length){
            return 0;
        }
        
        if(dp[state] != 0){
            return dp[state];
        }
        
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < bikes.length; i++){
            if((state & (1 << i)) == 0){
                min = Math.min(min, dist(workers[workerIndex], bikes[i]) + dfs(workers, workerIndex + 1, bikes, state | (1 << i), dp));
            }
        }
        
        dp[state] = min;
        return min;
    }
    
    private int dist(int [] a, int [] b){
        return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);
    }
}
